{"ast":null,"code":"import _objectSpread from \"/home/chhay/Project/Vuvejs2/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.search.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.url.js\";\nimport \"core-js/modules/web.url-search-params.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Spinner from '../spinner/Spinner'; //import this ixin for use spinner\n\nimport Mixin from '../../../helper/mixin.js'; //import this ixin for use spinner\n\nimport { mapActions, mapGetters } from 'vuex';\nexport default {\n  components: {\n    Spinner: Spinner\n  },\n  mixins: [Mixin],\n  data: function data() {\n    return {\n      editUser: {\n        id: \"\",\n        new_name: \"\",\n        new_email: \"\",\n        old_password: \"\",\n        new_password: \"\",\n        new_image: \"\",\n        new_phone: \"\",\n        new_userType: \"\"\n      },\n      preview: \"\",\n      search: \"\"\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters('auth', ['Allusers', 'Allerrors', 'Success'])), {}, {\n    searchFilter: function searchFilter() {\n      var _this = this;\n\n      return this.Allusers.filter(function (item) {\n        return item.name.toLowerCase().includes(_this.search.toLowerCase());\n      });\n    }\n  }),\n  methods: _objectSpread(_objectSpread({}, mapActions('auth', ['getUsers', 'deleteUsers', 'udpateUsers'])), {}, {\n    Edit: function Edit(userID) {\n      var secificUser = this.Allusers.find(function (user) {\n        return user.id === userID;\n      }); //to get old value of data to show when user click edit\n\n      this.editUser.id = userID;\n      this.editUser.new_name = secificUser.name;\n      this.editUser.new_email = secificUser.email;\n      this.editUser.new_image = secificUser.image;\n      this.editUser.new_phone = secificUser.phone;\n      this.editUser.new_userType = secificUser.userType;\n    },\n    Update: function Update(userID) {\n      var formData = new FormData();\n      formData.append('new_name', this.editUser.new_name);\n      formData.append('new_email', this.editUser.new_email);\n      formData.append('new_password', this.editUser.new_password);\n      formData.append('old_password', this.editUser.old_password);\n      formData.append('new_userType', this.editUser.new_userType);\n      formData.append('new_phone', this.editUser.new_phone);\n      formData.append('new_image', this.editUser.new_image);\n      formData.append('_method', 'PUT'); //in this route js can't understand put request so we have to use post request instead but make sure we append the formData with _'method':'PUT')\n\n      var config = {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      };\n      this.udpateUsers({\n        userID: userID,\n        formData: formData,\n        config: config\n      }); // use this if we dont use mapAction this.$store.dispatch('auth/udpateUsers',{userID,formData,config})           \n\n      this.showSpinner(); //to show spinnser we call showSpinner functions from mixin that we import above\n    },\n    Delete: function Delete(userID) {\n      if (confirm(\"Are your sure want to delete this user?\")) {\n        this.deleteUsers(userID);\n        this.showSpinner(); //to show spinnser we call showSpinner functions from mixin that we import above\n      }\n    },\n    processFile: function processFile(event) {\n      this.editUser.new_image = event.target.files[0];\n      this.preview = URL.createObjectURL(this.editUser.new_image);\n    }\n  }),\n  mounted: function mounted() {\n    this.getUsers(); //call this mehtod from ...mapActions if  we not mouted users will not found\n  } //mounted(){this.$store.dispatch( 'auth/getUsers'); // use this we dont use mapActions}\n\n};","map":{"version":3,"sources":["UserList.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div>\n        <!-- whenever we use child route we have to add router-view to wrappe all parent component -->\n        <!-- and router-view plz see in layout/layout -->\n        \n        <h5 class=\"title\">User List <i class=\"fa fa-users\"></i></h5>\n        <md-table  md-card v-if=\"this.Allusers.length >0\">\n            <md-table-toolbar>\n                <h1 class=\"md-title\">Users</h1>\n                <b-form-input v-model=\"search\" size=\"sm\" style=\"width:200px;margin-right:5px;\" class=\"\" placeholder=\"Search name...\"></b-form-input >\n                <router-link :to=\"{name:'UserRegister'}\"><button class=\"btn btn-secondary btn-sm text-right\"><i class=\"fas fa-plus\"></i> Add New User</button></router-link>\n            </md-table-toolbar>\n            <md-table-row style=\"background-color:#ADD8E6;\">\n                <md-table-head md-numeric>NO_</md-table-head>\n                <md-table-head>Photo</md-table-head>\n                <md-table-head>Name</md-table-head>\n                <md-table-head>Email</md-table-head>\n                <md-table-head>Phone</md-table-head>\n                <md-table-head>Role</md-table-head>\n                <md-table-head>Created</md-table-head>\n                <md-table-head>Updated</md-table-head>\n                <md-table-head>Action</md-table-head>\n            </md-table-row>\n\n            <md-table-row slot=\"md-table-row\" v-for=\"(user, index) in searchFilter\" :key=\"user.id\">\n                <md-table-cell md-numeric>{{ index+1 }}</md-table-cell>\n                <md-table-cell><img class=\"img\" :src=\"ImageURL+'/users/'+user.image\" alt=\"photo\"></md-table-cell>\n                <md-table-cell>{{ user.name }}</md-table-cell>\n                <md-table-cell>{{ user.email }}</md-table-cell>\n                <md-table-cell>{{ user.phone }}</md-table-cell>\n                <md-table-cell>{{ user.userType }}</md-table-cell>\n                <md-table-cell>{{ user.created_at | formatDate }}</md-table-cell> <!-- formatDate is a custom filter in main.js root -->\n                <md-table-cell>{{ user.updated_at | formatDate }}</md-table-cell> <!-- formatDate is a custom filter in main.js root -->\n                <md-table-cell>\n                    <b-button :disabled=\"usertype === 'User'\" v-b-modal.modal @click=\"Edit(user.id)\" size=\"sm\" variant=\"info\" title=\"Edit\"><b-icon icon=\"file-earmark-medical\"></b-icon></b-button>\n                    <b-button :disabled=\"usertype === 'User'\" @click=\"Delete(user.id)\" size=\"sm\" variant=\"danger\" title=\"Delete\"><b-icon icon=\"trash\"></b-icon></b-button>\n                </md-table-cell>\n            </md-table-row>\n        </md-table>\n\n        <md-table md-card v-if=\"this.Allusers.length == 0\">\n            <md-table-toolbar>\n                <h1 class=\"md-title\">No User</h1><router-link :to=\"{name:'UserRegister'}\"><button class=\"btn btn-secondary btn-sm text-right\">Add New User</button></router-link>\n            </md-table-toolbar>\n        </md-table>\n\n<!-- =====================showign modal vue bootstrap for update user================== -->\n        <b-modal id=\"modal\" hide-footer title=\"Update User\">\n            <b-alert show variant=\"success\" v-if=\"this.Success\">{{this.Success}}</b-alert>\n            <b-form  @submit.prevent=\"Update(editUser.id)\">\n                <div class=\"row\">\n                    <div class=\"mb-3 col-lg-6 col-sm-12\">\n                        <label for=\"name\" class=\"mb-2\">New Name</label>\n                        <b-form-input size=\"sm\" id=\"name\"  v-model=\"editUser.new_name\" type=\"text\" placeholder=\"New Name\"></b-form-input>\n                        <small class=\"text-danger\" v-if=\"this.Allerrors && this.Allerrors.new_name\">{{this.Allerrors.new_name[0]}}</small>\n                    </div>\n                    <div class=\"mb-3 col-lg-6 col-sm-12\">\n                        <label for=\"email\" class=\"mb-2\">New Email</label>\n                        <b-form-input size=\"sm\" id=\"email\"  v-model=\"editUser.new_email\" type=\"email\" placeholder=\"Example@gmail.com\"></b-form-input>\n                        <small class=\"text-danger\" v-if=\"this.Allerrors && this.Allerrors.new_email\">{{this.Allerrors.new_email[0]}}</small>\n                    </div>\n                    <div class=\"mb-3 col-lg-6 col-sm-12\">\n                        <label for=\"password\" class=\"mb-2\">Old Password</label>\n                        <b-form-input size=\"sm\" id=\"password\"  v-model=\"editUser.old_password\" type=\"password\" placeholder=\"Old Password\"></b-form-input>\n                        <small class=\"text-danger\" v-if=\"this.Allerrors && this.Allerrors.old_password\">{{this.Allerrors.old_password[0]}}</small>\n                    </div>\n                    <div class=\"mb-3 col-lg-6 col-sm-12\">\n                        <label for=\"re_password\" class=\"mb-2\">New Password</label>\n                        <b-form-input size=\"sm\" id=\"re_password\"  v-model=\"editUser.new_password\" type=\"password\" placeholder=\"New Password\"></b-form-input>\n                        <small class=\"text-danger\" v-if=\"this.Allerrors && this.Allerrors.new_password\">{{this.Allerrors.new_password[0]}}</small>\n                    </div>\n                    <div class=\"mb-3 col-lg-6 col-sm-12\">\n                        <label for=\"phone\" class=\"mb-2\">New Phone</label>\n                        <b-form-input size=\"sm\" id=\"phone\"  v-model=\"editUser.new_phone\" type=\"text\" placeholder=\"New Phone\"></b-form-input>\n                        <small class=\"text-danger\" v-if=\"this.Allerrors && this.Allerrors.new_phone\">{{this.Allerrors.new_phone[0]}}</small>\n                    </div>\n                    <div class=\"mb-3 col-lg-6 col-sm-12\">\n                        <label for=\"usertype\" class=\"mb-2\">User Type</label>\n                        <select v-model=\"editUser.new_userType\" class=\"form-select form-select-sm\">\n                            <option :value=\"'User'\"  :selected=\"editUser.new_userType === 'User'\">User</option>\n                            <option :value=\"'Admin'\" :selected=\"editUser.new_userType === 'Admin'\">Admin</option>\n                        </select>\n                        <small class=\"text-danger\" v-if=\"this.Allerrors && this.Allerrors.userType\">{{this.Allerrors.userType[0]}}</small>\n                    </div>\n                    <div class=\"mb-3 col-lg-6 col-sm-12\">\n                        <label for=\"image\" class=\"mb-2\">Image</label>\n                        <input @change=\"processFile\" id=\"image\" class=\"form-control form-control-sm\" type=\"file\">\n                        <small class=\"text-danger\" v-if=\"this.Allerrors && this.Allerrors.image\">{{this.Allerrors.image[0]}}</small>\n                    </div>\n                    <div class=\"d-flex justify-content-start\">\n                        <div id=\"preview\">\n                            <img class=\"preview\" v-if=\"preview\" :src=\"preview\" alt=\"\">\n                            <img class=\"preview\" v-else :src=\"ImageURL+'/users/'+editUser.new_image\" alt=\"\">\n                        </div>\n                    </div>\n                    <b-button variant=\"info\" size=\"sm\" type=\"submit\" style=\"width:fit-content;margin:10px;\">Update</b-button>\n                </div>\n            </b-form>\n        </b-modal>\n<!-- ======================showing spinner========================= -->\n        <Spinner :active=\"spinnerActive\" text=\"Loading...\"></Spinner>\n    </div>\n</template>\n\n<script>\nimport Spinner from '../spinner/Spinner'; //import this ixin for use spinner\nimport Mixin from '../../../helper/mixin.js'; //import this ixin for use spinner\nimport {mapActions,mapGetters} from 'vuex';\nexport default {\n    components: {Spinner},\n    mixins: [Mixin],\n    data(){\n        return{\n            editUser:{\n                id:\"\",\n                new_name:\"\",\n                new_email:\"\",\n                old_password:\"\",\n                new_password:\"\",\n                new_image:\"\",\n                new_phone:\"\",\n                new_userType:\"\",\n            },\n            preview: \"\",\n            search:\"\"\n        }\n    },\n    computed:{\n        ...mapGetters('auth',['Allusers','Allerrors','Success']),\n        searchFilter(){\n            return this.Allusers.filter((item) => {\n                return item.name.toLowerCase().includes(this.search.toLowerCase());\n            });\n        }\n    },\n    methods:{\n        ...mapActions('auth',['getUsers','deleteUsers','udpateUsers']),\n        Edit(userID){\n            const secificUser = this.Allusers.find(user=> user.id === userID); //to get old value of data to show when user click edit\n            this.editUser.id = userID;\n            this.editUser.new_name = secificUser.name;\n            this.editUser.new_email = secificUser.email;\n            this.editUser.new_image = secificUser.image;\n            this.editUser.new_phone = secificUser.phone;\n            this.editUser.new_userType = secificUser.userType;\n        },\n        Update(userID){\n            let formData = new FormData();\n            formData.append('new_name',this.editUser.new_name);\n            formData.append('new_email',this.editUser.new_email);\n            formData.append('new_password',this.editUser.new_password);\n            formData.append('old_password',this.editUser.old_password);\n            formData.append('new_userType',this.editUser.new_userType);\n            formData.append('new_phone',this.editUser.new_phone);\n            formData.append('new_image',this.editUser.new_image);\n            formData.append('_method', 'PUT')  //in this route js can't understand put request so we have to use post request instead but make sure we append the formData with _'method':'PUT')\n            \n            let config = {\n                headers:{\n                    'Content-Type':'multipart/form-data',         \n                }        \n            }\n            \n            this.udpateUsers({userID,formData,config});    // use this if we dont use mapAction this.$store.dispatch('auth/udpateUsers',{userID,formData,config})           \n            this.showSpinner();                            //to show spinnser we call showSpinner functions from mixin that we import above\n        },\n        Delete(userID){\n            if(confirm(\"Are your sure want to delete this user?\")){\n                this.deleteUsers(userID);\n                this.showSpinner();                         //to show spinnser we call showSpinner functions from mixin that we import above\n            }\n            \n        },\n        processFile(event) {\n            this.editUser.new_image = event.target.files[0];\n            this.preview = URL.createObjectURL(this.editUser.new_image);\n        }\n    },\n    mounted(){\n       this.getUsers();   //call this mehtod from ...mapActions if  we not mouted users will not found\n    },\n\n    //mounted(){this.$store.dispatch( 'auth/getUsers'); // use this we dont use mapActions}\n}\n</script>\n\n<style>\n#preview{\n    width: 70%;\n}\n.preview{\n    width: 100%;\n}\n.img{\n    width: 60px;\n}\n.title{\n    padding: 20px 0;\n}\n</style>"],"sourceRoot":"src/components/auth"},"metadata":{},"sourceType":"module"}