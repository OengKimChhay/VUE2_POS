{"ast":null,"code":"import http from '@/axiosAPI/axios.js';\nvar category = {\n  namespaced: true,\n  state: {\n    Tables: [],\n    Errors: [],\n    Success: \"\"\n  },\n  mutations: {\n    ADD_TABLE: function ADD_TABLE(state, data) {\n      state.Tables = data;\n    },\n    GET_TABLE: function GET_TABLE(state, data) {\n      state.Tables = data;\n    },\n    UPDATE_TABLE: function UPDATE_TABLE(state, data) {\n      state.Tables = data;\n    },\n    GET_ERRORS: function GET_ERRORS(state, error) {\n      state.Errors = error;\n    },\n    SUCCESS: function SUCCESS(state, success) {\n      state.Success = success;\n    }\n  },\n  actions: {\n    addTables: function addTables(_ref, formData) {\n      var commit = _ref.commit,\n          state = _ref.state;\n      http.post(\"/ui/table\", formData).then(function (response) {\n        if (response.data.status === 'success') {\n          state.Errors = \"\";\n          commit(\"ADD_TABLE\", formData); //we have to commit data otherwise formData won't be pass to route \n\n          commit(\"SUCCESS\", response.data.message);\n          setTimeout(function () {\n            window.location.reload(); //reload page after go to another route;\n          }, 2000);\n        } else if (response.data.status === 'fail') {\n          commit(\"GET_ERRORS\", response.data.message);\n        }\n      }).catch(function (error) {\n        if (error) {\n          commit(\"GET_ERRORS\", error.response.data.errors);\n          console.log(error.response.data);\n        }\n      });\n    },\n    deleteTables: function deleteTables(_ref2, tableID) {\n      var commit = _ref2.commit,\n          state = _ref2.state;\n      http.delete(\"/ui/table/\" + tableID).then(function (response) {\n        state.Errors = \"\";\n        commit(\"SUCCESS\", response.data.message);\n        setTimeout(function () {\n          window.location.reload(); //reload page after go to another route;\n        }, 2000);\n      }).catch(function (error) {\n        console.log(error.response);\n      });\n    },\n    updateTables: function updateTables(_ref3, _ref4) {\n      var commit = _ref3.commit,\n          state = _ref3.state;\n      var tableID = _ref4.tableID,\n          formData = _ref4.formData;\n      http.post(\"/ui/table/\" + tableID, formData) //we use post req instead of put coz vue dont understand put but if we want to update we have to add 'method':'_PUT'in form data when edit\n      .then(function (response) {\n        state.Errors = \"\";\n        commit(\"UDATE_TABLE\", formData);\n        commit(\"SUCCESS\", response.data.message);\n        setTimeout(function () {\n          window.location.reload(); //reload page after go to another route;\n        }, 2000);\n      }).catch(function (error) {\n        if (error) {\n          commit(\"GET_ERRORS\", error.response.data.errors);\n          console.log(error.response);\n        }\n      });\n    },\n    getTables: function getTables(_ref5, page) {\n      var commit = _ref5.commit;\n      http.get(\"/ui/table?page=\" + page).then(function (response) {\n        commit(\"GET_TABLE\", response.data);\n      }).catch(function (error) {\n        console.log(error.response);\n      });\n    }\n  },\n  getters: {\n    Alltables: function Alltables(state) {\n      return state.Tables;\n    },\n    Allerrors: function Allerrors(state) {\n      return state.Errors;\n    },\n    Success: function Success(state) {\n      return state.Success;\n    }\n  }\n};\nexport default category;","map":{"version":3,"sources":["/home/chhay/Project/Vue_Project/vue2_pos/src/store/modules/table.js"],"names":["http","category","namespaced","state","Tables","Errors","Success","mutations","ADD_TABLE","data","GET_TABLE","UPDATE_TABLE","GET_ERRORS","error","SUCCESS","success","actions","addTables","formData","commit","post","then","response","status","message","setTimeout","window","location","reload","catch","errors","console","log","deleteTables","tableID","delete","updateTables","getTables","page","get","getters","Alltables","Allerrors"],"mappings":"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","sourcesContent":["\nimport http from '@/axiosAPI/axios.js';\nconst category = {\n    namespaced: true,\n    state:{\n        Tables:[],\n        Errors: [],\n        Success:\"\",\n    },\n    mutations:{\n        ADD_TABLE:(state,data)=>{\n            state.Tables = data;\n        },\n        GET_TABLE:(state,data)=>{\n            state.Tables = data;\n        },\n        UPDATE_TABLE:(state,data)=>{\n            state.Tables = data;\n        },\n        GET_ERRORS:(state,error)=>{\n            state.Errors = error;\n        },\n        SUCCESS:(state,success)=>{\n            state.Success = success;\n        }\n    },\n    actions:{\n        addTables: ({commit,state},formData) =>{\n            http.post(\"/ui/table\",formData)\n            .then((response)=>{\n                if(response.data.status ==='success'){\n                    state.Errors = \"\";\n                    commit(\"ADD_TABLE\",formData); //we have to commit data otherwise formData won't be pass to route \n                    commit(\"SUCCESS\",response.data.message);\n                    setTimeout(function(){\n                        window.location.reload();//reload page after go to another route;\n                    },2000);\n                }else if(response.data.status ==='fail'){\n                    commit(\"GET_ERRORS\",response.data.message);\n                }\n            })\n            .catch(error=>{\n                if(error){\n                    commit(\"GET_ERRORS\",error.response.data.errors);\n                    console.log(error.response.data);\n                }\n            })\n        },\n        deleteTables: ({commit,state},tableID) =>{\n            http.delete(\"/ui/table/\"+tableID)\n            .then((response)=>{\n                state.Errors = \"\";\n                commit(\"SUCCESS\",response.data.message);\n                setTimeout(function(){\n                    window.location.reload();//reload page after go to another route;\n                },2000);\n                \n            })\n            .catch((error)=>{\n                console.log(error.response)\n            })\n        },\n        updateTables: ({commit,state}, {tableID, formData}) => {\n            http.post(\"/ui/table/\"+tableID, formData) //we use post req instead of put coz vue dont understand put but if we want to update we have to add 'method':'_PUT'in form data when edit\n            .then((response)=>{\n                state.Errors = \"\";\n                commit(\"UDATE_TABLE\",formData);\n                commit(\"SUCCESS\",response.data.message);\n                setTimeout(function(){\n                    window.location.reload();//reload page after go to another route;\n                },2000);\n            })\n            .catch((error)=>{\n                if(error){\n                    commit(\"GET_ERRORS\",error.response.data.errors);\n                    console.log(error.response);\n                }\n            })\n        },\n        getTables: ({commit},page) =>{\n            http.get(\"/ui/table?page=\"+ page)\n            .then((response)=>{\n                commit(\"GET_TABLE\",response.data);\n            })\n            .catch((error)=>{\n                console.log(error.response)\n            })\n        },\n    },\n    getters:{\n        Alltables: (state) => {\n            return state.Tables;\n        },\n        Allerrors: (state) => {\n            return state.Errors;\n        },\n        Success: (state) =>{\n            return state.Success;\n        }\n    }\n}\nexport default category"]},"metadata":{},"sourceType":"module"}