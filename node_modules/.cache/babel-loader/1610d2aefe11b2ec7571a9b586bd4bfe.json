{"ast":null,"code":"import http from '@/axiosAPI/axios.js';\nvar category = {\n  namespaced: true,\n  state: {\n    Categories: [],\n    Errors: [],\n    Success: \"\"\n  },\n  mutations: {\n    ADD_CATEGORY: function ADD_CATEGORY(state, data) {\n      state.Categories = data;\n    },\n    GET_CATEGORY: function GET_CATEGORY(state, data) {\n      state.Categories = data;\n    },\n    UDATE_CATEGORY: function UDATE_CATEGORY(state, data) {\n      state.Categories = data;\n    },\n    GET_ERRORS: function GET_ERRORS(state, error) {\n      state.Errors = error;\n    },\n    SUCCESS: function SUCCESS(state, success) {\n      state.Success = success;\n    }\n  },\n  actions: {\n    addCategoies: function addCategoies(_ref, formData) {\n      var commit = _ref.commit,\n          state = _ref.state;\n      http.post(\"/ui/category\", formData).then(function (response) {\n        if (response.data.status === 'success') {\n          state.Errors = \"\";\n          commit(\"ADD_CATEGORY\", formData); //we have to commit data otherwise formData won't be pass to route \n\n          commit(\"SUCCESS\", response.data.message);\n          setTimeout(function () {\n            window.location.reload(); //reload page after go to another route;\n          }, 1000);\n        } else if (response.data.status === 'fail') {\n          commit(\"GET_ERRORS\", response.data.message);\n        }\n      }).catch(function (error) {\n        if (error) {\n          commit(\"GET_ERRORS\", error.response.data.errors);\n          console.log(error.response.data);\n        }\n      });\n    },\n    deleteCategoies: function deleteCategoies(_ref2, catID) {\n      var commit = _ref2.commit,\n          state = _ref2.state;\n      http.delete(\"/ui/category/\" + catID).then(function (response) {\n        state.Errors = \"\";\n        console.log(response.data);\n        commit(\"SUCCESS\", response.data.message);\n        setTimeout(function () {\n          window.location.reload(); //reload page after go to another route;\n        }, 2000);\n      }).catch(function (error) {\n        console.log(error.response);\n      });\n    },\n    updateCategoies: function updateCategoies(_ref3, _ref4) {\n      var commit = _ref3.commit,\n          state = _ref3.state;\n      var categoryID = _ref4.categoryID,\n          formData = _ref4.formData;\n      http.post(\"/ui/category/\" + categoryID, formData) //we use post req instead of put coz vue dont understand put but if we want to update we have to add 'method':'_PUT'in form data when edit\n      .then(function (response) {\n        state.Errors = \"\";\n        commit(\"UDATE_CATEGORY\", formData);\n        commit(\"SUCCESS\", response.data.message);\n        setTimeout(function () {\n          window.location.reload(); //reload page after go to another route;\n        }, 2000);\n      }).catch(function (error) {\n        if (error) {\n          commit(\"GET_ERRORS\", error.response.data.errors);\n          console.log(error.response);\n        }\n      });\n    },\n    getCategoies: function getCategoies(_ref5, page) {\n      var commit = _ref5.commit;\n      http.get(\"/ui/category?page=\" + page).then(function (response) {\n        console.log(response);\n        commit(\"GET_CATEGORY\", response.data);\n      }).catch(function (error) {\n        console.log(error.response);\n      });\n    }\n  },\n  getters: {\n    Allcategoires: function Allcategoires(state) {\n      return state.Categories;\n    },\n    Allerrors: function Allerrors(state) {\n      return state.Errors;\n    },\n    Success: function Success(state) {\n      return state.Success;\n    }\n  }\n};\nexport default category;","map":{"version":3,"sources":["/home/chhay/Project/Vue_Project/vue2_pos/src/store/modules/category.js"],"names":["http","category","namespaced","state","Categories","Errors","Success","mutations","ADD_CATEGORY","data","GET_CATEGORY","UDATE_CATEGORY","GET_ERRORS","error","SUCCESS","success","actions","addCategoies","formData","commit","post","then","response","status","message","setTimeout","window","location","reload","catch","errors","console","log","deleteCategoies","catID","delete","updateCategoies","categoryID","getCategoies","page","get","getters","Allcategoires","Allerrors"],"mappings":"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","sourcesContent":["\nimport http from '@/axiosAPI/axios.js';\nconst category = {\n    namespaced: true,\n    state:{\n        Categories: [],\n        Errors: [],\n        Success:\"\",\n    },\n    mutations:{\n        ADD_CATEGORY:(state,data)=>{\n            state.Categories = data;\n        },\n        GET_CATEGORY:(state,data)=>{\n            state.Categories = data;\n        },\n        UDATE_CATEGORY:(state,data)=>{\n            state.Categories = data;\n        },\n        GET_ERRORS:(state,error)=>{\n            state.Errors = error;\n        },\n        SUCCESS:(state,success)=>{\n            state.Success = success;\n        }\n    },\n    actions:{\n        addCategoies: ({commit,state},formData) =>{\n            http.post(\"/ui/category\",formData)\n            .then((response)=>{\n                if(response.data.status ==='success'){\n                    state.Errors = \"\";\n                    commit(\"ADD_CATEGORY\",formData); //we have to commit data otherwise formData won't be pass to route \n                    commit(\"SUCCESS\",response.data.message);\n                    setTimeout(function(){\n                        window.location.reload();//reload page after go to another route;\n                    },1000);\n                }else if(response.data.status ==='fail'){\n                    commit(\"GET_ERRORS\",response.data.message);\n                }\n            })\n            .catch(error=>{\n                if(error){\n                    commit(\"GET_ERRORS\",error.response.data.errors);\n                    console.log(error.response.data);\n                }\n            })\n        },\n        deleteCategoies: ({commit,state},catID) =>{\n            http.delete(\"/ui/category/\"+catID)\n            .then((response)=>{\n                state.Errors = \"\";\n                console.log(response.data);\n                commit(\"SUCCESS\",response.data.message);\n                setTimeout(function(){\n                    window.location.reload();//reload page after go to another route;\n                },2000);\n                \n            })\n            .catch((error)=>{\n                console.log(error.response)\n            })\n        },\n        updateCategoies: ({commit,state}, {categoryID, formData}) => {\n            http.post(\"/ui/category/\"+categoryID, formData) //we use post req instead of put coz vue dont understand put but if we want to update we have to add 'method':'_PUT'in form data when edit\n            .then((response)=>{\n                state.Errors = \"\";\n                commit(\"UDATE_CATEGORY\",formData);\n                commit(\"SUCCESS\",response.data.message);\n                setTimeout(function(){\n                    window.location.reload();//reload page after go to another route;\n                },2000);\n            })\n            .catch((error)=>{\n                if(error){\n                    commit(\"GET_ERRORS\",error.response.data.errors);\n                    console.log(error.response);\n                }\n            })\n        },\n        getCategoies: ({commit},page) =>{\n            http.get(\"/ui/category?page=\"+ page)\n            .then((response)=>{\n                console.log(response)\n                commit(\"GET_CATEGORY\",response.data);\n            })\n            .catch((error)=>{\n                console.log(error.response)\n            })\n        },\n    },\n    getters:{\n        Allcategoires: (state) => {\n            return state.Categories;\n        },\n        Allerrors: (state) => {\n            return state.Errors;\n        },\n        Success: (state) =>{\n            return state.Success;\n        }\n    }\n}\nexport default category"]},"metadata":{},"sourceType":"module"}